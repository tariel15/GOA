#3) შექმენით Library კლასი, რომელსაც ექნება protected ატრიბუტი _books და private ატრიბუტი __secretCode. დაამატეთ სტატიკური მეთოდი, რომელიც დააბრუნებს წიგნის დაგვიანების ჯარიმის გამოთვლილ მნიშვნელობას. კომენტარებით მიუთითეთ კლასისა და სტატიკური მეთოდის განსხვავება
class Library:
    def __init__(self, books, secret_code):
        self._books = books  
        self.__secretCode = secret_code  
    @staticmethod
    def calculate_fine(days_late, fine_per_day=1.5):
        return days_late * fine_per_day
lib = Library(["Book1", "Book2"], "XYZ123")
print("ჯარიმა 5 დღის დაგვიანებისთვის:", Library.calculate_fine(5))

# protected ატრიბუტი (_books): 
# გარედან ხელმისაწვდომია, მაგრამ მიღებულია რომ პირდაპირ არ გამოვიყენოთ
# გარდა იმ შემთხვევისა, თუ მემკვიდრეობით მიღებულ კლასში ვართ.

# private ატრიბუტი (__secretCode): 
# გარედან პირდაპირ წვდომა არ არის შესაძლებელი (მხოლოდ კლასის შიგნით).

# კლასის მეთოდი (@classmethod):
# იღებს cls პარამეტრს და მუშაობს უშუალოდ კლასზე (მაგ. შეუძლია კლასის ცვლადების შეცვლა).

# სტატიკური მეთოდი (@staticmethod):
# არ იღებს cls და self-ს. ფუნქციაა, რომელიც ლოგიკურად კლასს ეკუთვნის,
# მაგრამ არ საჭიროებს არც ობიექტის, არც კლასის მდგომარეობას.